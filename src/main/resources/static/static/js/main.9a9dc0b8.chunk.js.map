{"version":3,"sources":["../node_modules/encoding/lib sync","modules/actions/allAction.js","modules/constants/initialState.js","modules/reducers/rootReducer.js","modules/reducers/userServiceReducer.js","modules/constants/AppContants.js","modules/components/LoginPage.js","modules/components/UserPage.js","modules/components/RegisterUser.js","App.js","serviceWorker.js","index.js","modules/store/store.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","newUserRegister","status","dispatch","type","data","alterLoginStatus","loggedInUser","user","combineReducers","userServiceReducer","state","initialState","action","Object","assign","loginStatus","userDetails","register","serviceList","fetchAPI","studentList","selectedStudent","studentDetailsPopup","payload","url","allServices","authenticate","userSubscribeServices","users","LoginPage","props","handleChange","event","field","setState","target","value","handleSubmit","preventDefault","loginVerify","username","password","fetch","urls","method","headers","body","JSON","stringify","this","then","response","json","console","log","catch","error","length","className","onSubmit","bsSize","autoFocus","onChange","disabled","validateForm","map","service","name","Component","connect","UserPage","subscribes","subscribedList","onClick","subscribeService","RegisterUser","message","App","studentSelection","registerUser","serviceListFetch","allServicesFetch","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+IAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,oGCGZC,EAAkB,SAACC,GAAD,OAAY,SAAAC,GACzCA,EAAS,CACLC,KAJuB,gBAKvBC,KAAMH,MAGCI,EAAmB,SAACJ,GAAD,OAAY,SAAAC,GAC1CA,EAAS,CACLC,KAbsB,eActBC,KAAMH,MAUCK,EAAe,SAACC,GAAD,OAAU,SAAAL,GACpCA,EAAS,CACLC,KAzBoB,aA0BpBI,WCjCS,GACb,aAAe,EACf,YAAe,GACf,YAAe,GACf,MAAS,GACT,UAAY,GCFCC,cAAgB,CAC7BC,mBCAa,WAAmC,IAAlCC,EAAiC,uDAAzBC,EAAcC,EAAW,uCAC/C,OAAQA,EAAOT,MACb,IHAwB,eGCtB,OAAOU,OAAOC,OAAO,GAAIJ,EAAO,CAAEK,YAAaH,EAAOR,OACxD,IHDsB,aGEpB,OAAOS,OAAOC,OAAO,GAAIJ,EAAO,CAAEM,YAAaJ,EAAOL,OACxD,IHDyB,gBGEvB,OAAOM,OAAOC,OAAO,GAAIJ,EAAO,CAAEO,SAAUL,EAAOR,OACrD,IHJyB,gBGKvB,OAAOS,OAAOC,OAAO,GAAIJ,EAAO,CAAEQ,YAAaN,EAAOR,OACxD,IHbqB,YGcnB,OAAOS,OAAOC,OAAO,GAAIJ,EAAO,CAAES,UAAWT,EAAMS,WACrD,IHdwB,eGetB,OAAON,OAAOC,OAAO,GAAIJ,EAAO,CAC9BU,YAAaR,EAAOR,OAExB,IHjB4B,mBGkB1B,OAAOS,OAAOC,OAAO,GAAIJ,EAAO,CAAEW,gBAAiBT,EAAOS,kBAC5D,IHlB2B,kBGmBzB,OAAOR,OAAOC,OAAO,GAAIJ,EAAO,CAAEY,oBAAqBV,EAAOW,UAChE,QACE,OAAOb,M,iECtBTc,EAAM,GAOK,GACbC,aAJAD,EALgB,gDASG,eACnBE,aAAcF,EAAM,gBACpBG,sBAAuBH,EAAM,yBAC7BI,MAAOJ,EAAM,UCTTK,E,YACJ,WAAYC,GAAO,IAAD,8BAClB,4CAAMA,KAoCLC,aAAe,SAACC,EAAOC,GAErB,EAAKC,SAAL,eACGD,EAAQD,EAAMG,OAAOC,SAxCT,EA4CjBC,aAAe,SAAAL,GACbA,EAAMM,iBACN,EAAKC,eA5CN,EAAK7B,MAAM,CACT8B,SAAS,GACTC,SAAS,IAJK,E,2EAOH,IAAD,OACXC,MAAMC,EAAKjB,aAAc,CACvBkB,OAAQ,OACRC,QAAS,CACN,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC,SAAYC,KAAKvC,MAAM8B,SAAU,SAAYS,KAAKvC,MAAM+B,aAEhFS,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAAC9C,GACLiD,QAAQC,IAAI,sBAAwBlD,GACjB,MAAhBA,EAAKH,QACN,EAAK6B,MAAMzB,kBAAiB,GAC5B,EAAKyB,MAAMxB,aAAaF,IAExB,EAAK0B,MAAMzB,kBAAiB,KAK/BkD,MAAM,SAAAC,GAAK,OAAI,EAAKtB,SAAS,CAAEsB,c,qCAIhC,OAAOP,KAAKvC,MAAM8B,SAASiB,OAAS,GAAKR,KAAKvC,MAAM+B,SAASgB,OAAS,I,+BAe9D,IAAD,OACP,OACE,yBAAKC,UAAU,SACb,0BAAMC,SAAUV,KAAKZ,cACnB,yBAAKtC,GAAG,WAAW6D,OAAO,SACxB,2CACA,2BACEC,WAAS,EACT1D,KAAK,OACLiC,MAAOa,KAAKvC,MAAM8B,SAClBsB,SAAU,SAAC9B,GAAD,OAAW,EAAKD,aAAaC,EAAO,gBAGlD,yBAAKjC,GAAG,WAAW6D,OAAO,SACxB,2CACA,2BACExB,MAAOa,KAAKvC,MAAM+B,SAClBqB,SAAU,SAAC9B,GAAD,OAAW,EAAKD,aAAaC,EAAO,aAC9C7B,KAAK,cAGT,4BACEyD,OAAO,QACPG,UAAWd,KAAKe,eAChB7D,KAAK,UAHP,UASF,oDAEE8C,KAAKnB,MAAMZ,YAAY+C,IAAI,SAAAC,GAAO,OAAI,6BAAMA,EAAQC,a,GAlFvCC,aAqGTC,cAZS,SAAA3D,GAAK,MAAK,CAChCQ,YAAaR,EAAMD,mBAAmBS,cAGb,SAAAhB,GAAQ,MACjC,CACEG,iBAAkB,SAACJ,GAAD,OAAYC,EAASG,EAAiBJ,KACxDK,aAAc,SAACC,GAAD,OAAUL,EAASI,EAAaC,OAKnC8D,CAA6CxC,GCrGtDyC,E,YACJ,WAAYxC,GAAO,IAAD,8BAClB,4CAAMA,KAYLC,aAAe,SAACC,EAAOC,GACrB,EAAKC,SAAL,eACGD,EAAQD,EAAMG,OAAOC,SAbzB,EAAK1B,MAAM,CACT8B,SAAS,GACTC,SAAS,IAJK,E,4EAUf,OAAOQ,KAAKvC,MAAM8B,SAASiB,OAAS,GAAKR,KAAKvC,MAAM+B,SAASgB,OAAS,I,uCASvDjE,EAAG0E,GAAS,IAAD,OAC1Bb,QAAQC,IAAI,0BAA0B9D,EAAI0E,EAASjB,KAAKnB,MAAMd,aAC9D0B,MAAMC,EAAKhB,sBAAuB,CAChCiB,OAAQ,OACRC,QAAS,CACN,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC,GAAMC,KAAKnB,MAAMd,YAAYjB,GAAIwE,WAAY,CAAC,CAAC,GAAML,EAAQnE,SAErFmD,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAAC9C,GACLiD,QAAQC,IAAI,0BAA4BlD,KAGzCmD,MAAM,SAAAC,GAAK,OAAI,EAAKtB,SAAS,CAAEsB,c,+BAIxB,IAAD,OACP,OACE,yBAAKE,UAAU,SACZ,mCAAST,KAAKnB,MAAMU,UACrB,qDAEES,KAAKnB,MAAM0C,eAAeP,IAAI,SAAAC,GAAO,OAAI,6BAAMA,EAAQC,QAGxD,uDAEElB,KAAKnB,MAAMZ,YAAY+C,IAAI,SAAAC,GAAO,OAAI,yBAAKO,QAAS,SAACzC,GAAD,OAAW,EAAK0C,iBAAiB1C,EAAOkC,KAAWA,EAAQC,a,GApDpGC,aA0ERC,cAfS,SAAA3D,GAAK,MAAK,CAChCQ,YAAaR,EAAMD,mBAAmBS,YACtCF,YAAaN,EAAMD,mBAAmBO,YACtCwB,SAAU9B,EAAMD,mBAAmBO,YAAYwB,SAC/CgC,eAAgB9D,EAAMD,mBAAmBO,YAAYuD,YAAc,KAG1C,SAAArE,GAAQ,MACjC,CACEG,iBAAkB,SAACJ,GAAD,OAAYC,EAASG,EAAiBJ,KACxDK,aAAc,SAACC,GAAD,OAAUL,EAASI,EAAaC,OAKnC8D,CAA6CC,GC1EtDK,E,YACJ,WAAY7C,GAAO,IAAD,8BAClB,4CAAMA,KAYLC,aAAe,SAACC,EAAOC,GACrB,EAAKC,SAAL,eACGD,EAAQD,EAAMG,OAAOC,SAfT,EAuCjBC,aAAe,SAAAL,GACbA,EAAMM,iBACN,EAAKrB,YAvCN,EAAKP,MAAM,CACT8B,SAAS,GACTC,SAAS,IAJK,E,4EAUf,OAAOQ,KAAKvC,MAAM8B,SAASiB,OAAS,GAAKR,KAAKvC,MAAM+B,SAASgB,OAAS,I,iCAS7D,IAAD,OACRf,MAAMC,EAAKf,MAAO,CAChBgB,OAAQ,OACRC,QAAS,CACN,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC,SAAYC,KAAKvC,MAAM8B,SAAU,SAAYS,KAAKvC,MAAM+B,aAEhFS,KAAK,SAAC9C,GACLiD,QAAQC,IAAI,4BAA8BlD,GACvB,MAAhBA,EAAKH,OACN,EAAK6B,MAAM9B,iBAAgB,GAE3B,EAAKkC,SAAS,CAACsB,MAAOpD,EAAKwE,YAG9BrB,MAAM,SAAAC,GAAK,OAAI,EAAKtB,SAAS,CAAEsB,c,+BAQxB,IAAD,OACP,OACE,yBAAKE,UAAU,YACb,0BAAMC,SAAUV,KAAKZ,cACnB,yBAAKtC,GAAG,WAAW6D,OAAO,SACxB,2CACA,2BACEC,WAAS,EACT1D,KAAK,OACLiC,MAAOa,KAAKvC,MAAM8B,SAClBsB,SAAU,SAAC9B,GAAD,OAAW,EAAKD,aAAaC,EAAO,gBAGlD,yBAAKjC,GAAG,WAAW6D,OAAO,SACxB,2CACA,2BACExB,MAAOa,KAAKvC,MAAM+B,SAClBqB,SAAU,SAAC9B,GAAD,OAAW,EAAKD,aAAaC,EAAO,aAC9C7B,KAAK,cAGT,4BACEyD,OAAO,QACPG,UAAWd,KAAKe,eAChB7D,KAAK,UAHP,kB,GAlEgBiE,aA+FZC,cAhBS,SAAA3D,GAAK,MAAK,CAChCQ,YAAaR,EAAMD,mBAAmBS,YACtCF,YAAaN,EAAMD,mBAAmBO,YACtCwB,SAAU9B,EAAMD,mBAAmBO,YAAYwB,SAC/CgC,eAAgB9D,EAAMD,mBAAmBO,YAAYuD,YAAc,KAG1C,SAAArE,GAAQ,MACjC,CACEG,iBAAkB,SAACJ,GAAD,OAAYC,EAASG,EAAiBJ,KACxDK,aAAc,SAACC,GAAD,OAAUL,EAASI,EAAaC,KAC9CP,gBAAiB,SAACC,GAAD,OAAYC,EAASF,EAAgBC,OAK3CoE,CAA6CM,GC3FtDE,E,2MAkBJC,iBAAmB,SAAC9C,GAClB,EAAKF,MAAMgD,oB,EAEbC,aAAe,WACb,EAAKjD,MAAM9B,iBAAgB,I,mFApB3BiD,KAAK+B,qB,yCAGY,IAAD,OAChBtC,MAAMC,EAAKlB,aACVyB,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAAC9C,GACLiD,QAAQC,IAAI,uBAAyBlD,GACrC,EAAK0B,MAAMmD,iBAAiB7E,KAG7BmD,MAAM,SAAAC,GAAK,OAAI,EAAKtB,SAAS,CAAEsB,c,+BAWhC,OACE,yBAAKE,UAAY,OACf,4BAAQA,UAAY,cAClB,wBAAIA,UAAY,aAAhB,2CAICT,KAAKnB,MAAMb,SAAqE,GAAzDgC,KAAKnB,MAAMf,YAAc,kBAAC,EAAD,MAAe,kBAAC,EAAD,MAI/DkC,KAAKnB,MAAMf,YAAiH,GAAlGkC,KAAKnB,MAAMb,SAAW,kBAAC,EAAD,MAAmB,4BAAQwD,QAASxB,KAAK8B,cAAtB,iB,GArC5DX,aA2DHC,cAfS,SAAA3D,GAAK,MAAK,CAChCK,YAAaL,EAAMD,mBAAmBM,YACtCyB,SAAU9B,EAAMD,mBAAmBO,YAAYwB,SAC/CgC,eAAgB9D,EAAMD,mBAAmBO,YAAYuD,YAAc,GACnEtD,SAAUP,EAAMD,mBAAmBQ,WAIV,SAAAf,GAAQ,MAAK,CACtC4E,iBAAkB,kBAAM5E,ERzB2B,SAAAA,GACnDA,EAAS,CACPC,KApC4B,mBAqC5BkB,sBAH4B,IAACA,GQ0B/B4D,iBAAkB,SAAC7E,GAAD,OAAUF,ERxCE,SAACE,GAAD,OAAU,SAAAF,GACxCA,EAAS,CACLC,KAjBuB,gBAkBvBC,UQqCiC6E,CAAiB7E,KACtDJ,gBAAiB,SAACC,GAAD,OAAYC,EAASF,EAAgBC,OAIzCoE,CAA6CQ,GCxDxCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAQ,kBACf,IADe,CACNC,MCRI,WAA4C,IAApB9E,EAAmB,uDAAJ,GACpD,OAAO+E,YACLC,EACAhF,EACAiF,YAAgBC,MDKhBC,IAEA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC,gB","file":"static/js/main.9a9dc0b8.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 131;","\r\nexport const FETCH_API = \"FETCH_API\";\r\nexport const FETCHED_DATA = \"FETCHED_DATA\";\r\nexport const STUDENT_SELECTED = \"STUDENT_SELECTED\";\r\nexport const SELECTION_POPUP = \"SELECTION_POPUP\";\r\n\r\nexport const LOGIN_STATUS = \"LOGIN_STATUS\";\r\nexport const LOGIN_USER = \"LOGIN_USER\";\r\nexport const SERVICES_LIST = \"SERVICES_LIST\";\r\nexport const REGISTER_USER = \"REGISTER_USER\";\r\n\r\nexport const newUserRegister = (status) => dispatch => {\r\n  dispatch({\r\n      type: REGISTER_USER,\r\n      data: status\r\n    })\r\n}\r\nexport const alterLoginStatus = (status) => dispatch => {\r\n  dispatch({\r\n      type: LOGIN_STATUS,\r\n      data: status\r\n    })\r\n}\r\nexport const allServicesFetch = (data) => dispatch => {\r\n  dispatch({\r\n      type: SERVICES_LIST,\r\n      data\r\n    })\r\n}\r\n\r\nexport const loggedInUser = (user) => dispatch => {\r\n  dispatch({\r\n      type: LOGIN_USER,\r\n      user\r\n    })\r\n}\r\n\r\nexport const studentSelection = (selectedStudent) => dispatch => {\r\n  dispatch({\r\n    type: STUDENT_SELECTED,\r\n    selectedStudent\r\n  })\r\n}\r\n\r\nexport const dataRequestUpdate = () => dispatch => {\r\n  dispatch({\r\n      type: FETCH_API\r\n    })\r\n}\r\n\r\nexport const alterDetailsPopup = (status) => dispatch => {\r\n  dispatch({\r\n      type: SELECTION_POPUP,\r\n      payload: status\r\n    })\r\n}\r\n\r\nexport const studentDataFetch = (students) => dispatch => {\r\n  dispatch({\r\n      type: FETCHED_DATA,\r\n      data: students\r\n    })\r\n}\r\n","export default {\r\n  \"loginStatus\": false,\r\n  \"serviceList\": [],\r\n  \"userDetails\": {},\r\n  \"token\": \"\",\r\n  \"register\": false\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport userServiceReducer from './userServiceReducer';\r\n\r\nexport default combineReducers({\r\n  userServiceReducer\r\n});\r\n","import { LOGIN_STATUS, SERVICES_LIST, REGISTER_USER,\r\n  FETCH_API, FETCHED_DATA, STUDENT_SELECTED , SELECTION_POPUP, LOGIN_USER} from '../actions/allAction';\r\nimport initialState from \"../constants/initialState.js\";\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_STATUS:\r\n      return Object.assign({}, state, { loginStatus: action.data })\r\n    case LOGIN_USER:\r\n      return Object.assign({}, state, { userDetails: action.user })\r\n    case REGISTER_USER:\r\n      return Object.assign({}, state, { register: action.data })\r\n    case SERVICES_LIST:\r\n      return Object.assign({}, state, { serviceList: action.data })\r\n    case FETCH_API:\r\n      return Object.assign({}, state, { fetchAPI: !state.fetchAPI })\r\n    case FETCHED_DATA:\r\n      return Object.assign({}, state, {\r\n        studentList: action.data\r\n       })\r\n    case STUDENT_SELECTED:\r\n      return Object.assign({}, state, { selectedStudent: action.selectedStudent })\r\n    case SELECTION_POPUP:\r\n      return Object.assign({}, state, { studentDetailsPopup: action.payload })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","const localhost = false;\r\nconst localhostURL = \"http://localhost:8080/api\";\r\nconst herokuURL = \"https://service-subscriber.herokuapp.com/api\";\r\nlet url = \"\";\r\nif(localhost){\r\n  url = localhostURL;\r\n}else{\r\n  url = herokuURL;\r\n}\r\n\r\nexport default {\r\n  allServices: url + \"/allServices\",\r\n  authenticate: url + \"/authenticate\",\r\n  userSubscribeServices: url + \"/userSubscribeServices\",\r\n  users: url + \"/users\"\r\n}\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { alterLoginStatus, loggedInUser } from '../actions/allAction';\r\nimport urls from '../constants/AppContants';\r\n\r\nclass LoginPage extends Component {\r\n  constructor(props){\r\n  super(props);\r\n    this.state={\r\n      username:'',\r\n      password:''\r\n    }\r\n   }\r\n   loginVerify(){\r\n     fetch(urls.authenticate, {\r\n       method: 'POST',\r\n       headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\"username\": this.state.username, \"password\": this.state.password})\r\n     })\r\n     .then((response) => {\r\n       return response.json();\r\n     })\r\n     .then((data) => {\r\n       console.log(\"Login status data: \" , data);\r\n       if(data.status === 200){\r\n         this.props.alterLoginStatus(true);\r\n         this.props.loggedInUser(data);\r\n       }else{//500 etc\r\n         this.props.alterLoginStatus(false);\r\n         // this.props.wrongCredentails(data.message);\r\n       }\r\n\r\n     })\r\n     .catch(error => this.setState({ error }));\r\n   }\r\n\r\n   validateForm() {\r\n     return this.state.username.length > 0 && this.state.password.length > 0;\r\n   }\r\n\r\n   handleChange = (event, field) => {\r\n     debugger\r\n     this.setState({\r\n       [field]: event.target.value\r\n     });\r\n   }\r\n\r\n   handleSubmit = event => {\r\n     event.preventDefault();\r\n     this.loginVerify();\r\n   }\r\n\r\n   render() {\r\n     return (\r\n       <div className=\"Login\">\r\n         <form onSubmit={this.handleSubmit}>\r\n           <div id=\"username\" bsSize=\"large\">\r\n             <label>username</label>\r\n             <input\r\n               autoFocus\r\n               type=\"text\"\r\n               value={this.state.username}\r\n               onChange={(event) => this.handleChange(event, \"username\")}\r\n             />\r\n           </div>\r\n           <div id=\"password\" bsSize=\"large\">\r\n             <label>Password</label>\r\n             <input\r\n               value={this.state.password}\r\n               onChange={(event) => this.handleChange(event, \"password\")}\r\n               type=\"password\"\r\n             />\r\n           </div>\r\n           <button\r\n             bsSize=\"large\"\r\n             disabled={!this.validateForm()}\r\n             type=\"submit\"\r\n           >\r\n             Login\r\n           </button>\r\n         </form>\r\n\r\n         <h2>Available Services: </h2>\r\n         {\r\n           this.props.serviceList.map(service => <div>{service.name}</div>)\r\n         }\r\n       </div>\r\n     );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  serviceList: state.userServiceReducer.serviceList,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    alterLoginStatus: (status) => dispatch(alterLoginStatus(status)),\r\n    loggedInUser: (user) => dispatch(loggedInUser(user)),\r\n\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { alterLoginStatus, loggedInUser } from '../actions/allAction';\r\nimport urls from '../constants/AppContants';\r\n\r\nclass UserPage extends Component {\r\n  constructor(props){\r\n  super(props);\r\n    this.state={\r\n      username:'',\r\n      password:''\r\n    }\r\n   }\r\n\r\n\r\n   validateForm() {\r\n     return this.state.username.length > 0 && this.state.password.length > 0;\r\n   }\r\n\r\n   handleChange = (event, field) => {\r\n     this.setState({\r\n       [field]: event.target.value\r\n     });\r\n   }\r\n\r\n   subscribeService(e, service){\r\n     console.log(\"User page subscribe try\",e,  service, this.props.userDetails)\r\n     fetch(urls.userSubscribeServices, {\r\n       method: 'POST',\r\n       headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\"id\": this.props.userDetails.id, subscribes: [{\"id\": service.id}]})\r\n     })\r\n     .then((response) => {\r\n       return response.json();\r\n     })\r\n     .then((data) => {\r\n       console.log(\"Subscribed try result: \" , data);\r\n\r\n     })\r\n     .catch(error => this.setState({ error }));\r\n\r\n   }\r\n\r\n   render() {\r\n     return (\r\n       <div className=\"Login\">\r\n          <h3> Hi {this.props.username}</h3>\r\n         <div>Subscribed Services:</div>\r\n         {\r\n           this.props.subscribedList.map(service => <div>{service.name}</div>)\r\n         }\r\n\r\n          <h2>Subscribe to Services: </h2>\r\n          {\r\n            this.props.serviceList.map(service => <div onClick={(event) => this.subscribeService(event, service)}>{service.name}</div>)\r\n          }\r\n       </div>\r\n     );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  serviceList: state.userServiceReducer.serviceList,\r\n  userDetails: state.userServiceReducer.userDetails,\r\n  username: state.userServiceReducer.userDetails.username,\r\n  subscribedList: state.userServiceReducer.userDetails.subscribes || [],\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    alterLoginStatus: (status) => dispatch(alterLoginStatus(status)),\r\n    loggedInUser: (user) => dispatch(loggedInUser(user)),\r\n\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { alterLoginStatus, loggedInUser, newUserRegister } from '../actions/allAction';\r\nimport urls from '../constants/AppContants';\r\n\r\nclass RegisterUser extends Component {\r\n  constructor(props){\r\n  super(props);\r\n    this.state={\r\n      username:'',\r\n      password:''\r\n    }\r\n   }\r\n\r\n\r\n   validateForm() {\r\n     return this.state.username.length > 0 && this.state.password.length > 0;\r\n   }\r\n\r\n   handleChange = (event, field) => {\r\n     this.setState({\r\n       [field]: event.target.value\r\n     });\r\n   }\r\n\r\n   register(){\r\n     fetch(urls.users, {\r\n       method: 'POST',\r\n       headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\"username\": this.state.username, \"password\": this.state.password})\r\n     })\r\n     .then((data) => {\r\n       console.log(\"Register request status: \" , data);\r\n       if(data.status === 200){\r\n         this.props.newUserRegister(false);\r\n       }else{\r\n         this.setState({error: data.message})\r\n       }\r\n     })\r\n     .catch(error => this.setState({ error }));\r\n\r\n   }\r\n   handleSubmit = event => {\r\n     event.preventDefault();\r\n     this.register();\r\n   }\r\n\r\n   render() {\r\n     return (\r\n       <div className=\"Register\">\r\n         <form onSubmit={this.handleSubmit}>\r\n           <div id=\"username\" bsSize=\"large\">\r\n             <label>username</label>\r\n             <input\r\n               autoFocus\r\n               type=\"text\"\r\n               value={this.state.username}\r\n               onChange={(event) => this.handleChange(event, \"username\")}\r\n             />\r\n           </div>\r\n           <div id=\"password\" bsSize=\"large\">\r\n             <label>Password</label>\r\n             <input\r\n               value={this.state.password}\r\n               onChange={(event) => this.handleChange(event, \"password\")}\r\n               type=\"password\"\r\n             />\r\n           </div>\r\n           <button\r\n             bsSize=\"large\"\r\n             disabled={!this.validateForm()}\r\n             type=\"submit\"\r\n           >\r\n             Register\r\n           </button>\r\n         </form>\r\n       </div>\r\n     );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  serviceList: state.userServiceReducer.serviceList,\r\n  userDetails: state.userServiceReducer.userDetails,\r\n  username: state.userServiceReducer.userDetails.username,\r\n  subscribedList: state.userServiceReducer.userDetails.subscribes || [],\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    alterLoginStatus: (status) => dispatch(alterLoginStatus(status)),\r\n    loggedInUser: (user) => dispatch(loggedInUser(user)),\r\n    newUserRegister: (status) => dispatch(newUserRegister(status)),\r\n\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterUser);\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'fetch';\r\nimport { studentSelection, allServicesFetch, newUserRegister } from './modules/actions/allAction';\r\nimport LoginPage from './modules/components/LoginPage';\r\nimport UserPage from './modules/components/UserPage';\r\nimport RegisterUser from './modules/components/RegisterUser';\r\nimport urls from './modules/constants/AppContants';\r\n\r\nclass App extends Component {\r\n  componentDidMount(){\r\n    this.serviceListFetch();\r\n  }\r\n\r\n  serviceListFetch(){\r\n    fetch(urls.allServices)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      console.log(\"Available services: \" , data);\r\n      this.props.allServicesFetch(data)\r\n\r\n    })\r\n    .catch(error => this.setState({ error }));\r\n  }\r\n\r\n  studentSelection = (event) => {\r\n    this.props.studentSelection();\r\n  }\r\n  registerUser = () => {\r\n    this.props.newUserRegister(true);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"App\" >\r\n        <header className = \"App-header\" >\r\n          <h1 className = \"App-title\" > Welcome to Online Service Subscriber < /h1>\r\n        </header>\r\n\r\n        {\r\n          !this.props.register ? (this.props.loginStatus ? <UserPage /> : <LoginPage />) : \"\"\r\n        }\r\n\r\n        {\r\n          !this.props.loginStatus ? (this.props.register ? <RegisterUser /> : <button onClick={this.registerUser}>Register</button>) : \"\"\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  loginStatus: state.userServiceReducer.loginStatus,\r\n  username: state.userServiceReducer.userDetails.username,\r\n  subscribedList: state.userServiceReducer.userDetails.subscribes || [],\r\n  register: state.userServiceReducer.register,\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  studentSelection: () => dispatch(studentSelection()),\r\n  allServicesFetch: (data) => dispatch(allServicesFetch(data)),\r\n  newUserRegister: (status) => dispatch(newUserRegister(status)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  Provider\r\n} from 'react-redux'\r\nimport configureStore from './modules/store/store';\r\nimport './modules/styles/App.css';\r\nimport App from './App';\r\n// import registerServiceWorker from './registerServiceWorker';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <\r\n  Provider store = {\r\n    configureStore()\r\n  } >\r\n    <App / >\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n// registerServiceWorker();\r\nserviceWorker.unregister();\r\n\r\n//https://medium.com/backticks-tildes/setting-up-a-redux-project-with-create-react-app-e363ab2329b8\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\nexport default function configureStore(initialState = {}) {\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(thunk)\r\n  );\r\n}\r\n"],"sourceRoot":""}