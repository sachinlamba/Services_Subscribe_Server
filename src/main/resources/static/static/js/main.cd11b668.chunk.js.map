{"version":3,"sources":["../node_modules/encoding/lib sync","modules/actions/allAction.js","modules/constants/initialState.js","modules/reducers/rootReducer.js","modules/reducers/userServiceReducer.js","modules/constants/AppContants.js","modules/components/LoginPage.js","modules/components/UserPage.js","modules/components/RegisterUser.js","App.js","serviceWorker.js","index.js","modules/store/store.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","newUserRegister","status","dispatch","type","data","alterLoginStatus","loggedInUser","user","combineReducers","userServiceReducer","state","initialState","action","Object","assign","token","loginStatus","userDetails","register","serviceList","fetchAPI","studentList","selectedStudent","studentDetailsPopup","payload","url","allServices","authenticate","userSubscribeServices","users","LoginPage","props","handleChange","event","setState","target","value","handleSubmit","preventDefault","loginVerify","username","password","fetch","urls","method","headers","body","JSON","stringify","this","then","response","json","console","log","tokenSetter","catch","error","length","className","onSubmit","FormGroup","controlId","bsSize","FormLabel","FormControl","autoFocus","onChange","Button","block","disabled","validateForm","map","service","name","Component","connect","saveUser","UserPage","field","logout","split","subscribes","userDetailsUpdate","subscribedServices","subscribedList","onClick","Table","includes","unsubscribeService","subscribeService","RegisterUser","confirm_password","errorMsg","message","App","studentSelection","registerUser","serviceListFetch","allServicesFetch","style","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd11b668.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 140;","\r\nexport const FETCH_API = \"FETCH_API\";\r\nexport const FETCHED_DATA = \"FETCHED_DATA\";\r\nexport const STUDENT_SELECTED = \"STUDENT_SELECTED\";\r\nexport const SELECTION_POPUP = \"SELECTION_POPUP\";\r\n\r\nexport const LOGIN_STATUS = \"LOGIN_STATUS\";\r\nexport const LOGIN_USER = \"LOGIN_USER\";\r\nexport const SERVICES_LIST = \"SERVICES_LIST\";\r\nexport const REGISTER_USER = \"REGISTER_USER\";\r\nexport const TOKEN_SETTER = \"TOKEN_SETTER\";\r\n\r\nexport const newUserRegister = (status) => dispatch => {\r\n  dispatch({\r\n      type: REGISTER_USER,\r\n      data: status\r\n    })\r\n}\r\nexport const alterLoginStatus = (status) => dispatch => {\r\n  dispatch({\r\n      type: LOGIN_STATUS,\r\n      data: status\r\n    })\r\n}\r\nexport const allServicesFetch = (data) => dispatch => {\r\n  dispatch({\r\n      type: SERVICES_LIST,\r\n      data\r\n    })\r\n}\r\n\r\nexport const loggedInUser = (user) => dispatch => {\r\n  dispatch({\r\n      type: LOGIN_USER,\r\n      user\r\n    })\r\n}\r\n\r\nexport const tokenSetter = (token) => dispatch => {\r\n  dispatch({\r\n      type: TOKEN_SETTER,\r\n      token\r\n    })\r\n}\r\n\r\nexport const studentSelection = (selectedStudent) => dispatch => {\r\n  dispatch({\r\n    type: STUDENT_SELECTED,\r\n    selectedStudent\r\n  })\r\n}\r\n\r\nexport const dataRequestUpdate = () => dispatch => {\r\n  dispatch({\r\n      type: FETCH_API\r\n    })\r\n}\r\n\r\nexport const alterDetailsPopup = (status) => dispatch => {\r\n  dispatch({\r\n      type: SELECTION_POPUP,\r\n      payload: status\r\n    })\r\n}\r\n\r\nexport const studentDataFetch = (students) => dispatch => {\r\n  dispatch({\r\n      type: FETCHED_DATA,\r\n      data: students\r\n    })\r\n}\r\n","export default {\r\n  \"loginStatus\": false,\r\n  \"serviceList\": [],\r\n  \"userDetails\": {},\r\n  \"token\": \"\",\r\n  \"register\": false\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport userServiceReducer from './userServiceReducer';\r\n\r\nexport default combineReducers({\r\n  userServiceReducer\r\n});\r\n","import { LOGIN_STATUS, SERVICES_LIST, REGISTER_USER, TOKEN_SETTER,\r\n  FETCH_API, FETCHED_DATA, STUDENT_SELECTED , SELECTION_POPUP, LOGIN_USER} from '../actions/allAction';\r\nimport initialState from \"../constants/initialState.js\";\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TOKEN_SETTER:\r\n      return Object.assign({}, state, { token: action.token })\r\n    case LOGIN_STATUS:\r\n      return Object.assign({}, state, { loginStatus: action.data })\r\n    case LOGIN_USER:\r\n      return Object.assign({}, state, { userDetails: action.user })\r\n    case REGISTER_USER:\r\n      return Object.assign({}, state, { register: action.data })\r\n    case SERVICES_LIST:\r\n      return Object.assign({}, state, { serviceList: action.data })\r\n    case FETCH_API:\r\n      return Object.assign({}, state, { fetchAPI: !state.fetchAPI })\r\n    case FETCHED_DATA:\r\n      return Object.assign({}, state, {\r\n        studentList: action.data\r\n       })\r\n    case STUDENT_SELECTED:\r\n      return Object.assign({}, state, { selectedStudent: action.selectedStudent })\r\n    case SELECTION_POPUP:\r\n      return Object.assign({}, state, { studentDetailsPopup: action.payload })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","const localhost = false;\r\nconst localhostURL = \"http://localhost:8080/api\";\r\nconst herokuURL = \"https://service-subscriber.herokuapp.com/api\";\r\nlet url = \"\";\r\nif(localhost){\r\n  url = localhostURL;\r\n}else{\r\n  url = herokuURL;\r\n}\r\n\r\nexport default {\r\n  allServices: url + \"/allServices\",\r\n  authenticate: url + \"/authenticate\",\r\n  userSubscribeServices: url + \"/userSubscribeServices\",\r\n  users: url + \"/users\"\r\n}\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { alterLoginStatus, loggedInUser, tokenSetter } from '../actions/allAction';\r\nimport urls from '../constants/AppContants';\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\n\r\nclass LoginPage extends Component {\r\n  constructor(props){\r\n  super(props);\r\n    this.state={\r\n      username:'',\r\n      password:''\r\n    }\r\n   }\r\n   loginVerify(){\r\n     fetch(urls.authenticate, {\r\n       method: 'POST',\r\n       headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\"username\": this.state.username, \"password\": this.state.password})\r\n     })\r\n     .then((response) => {\r\n       return response.json();\r\n     })\r\n     .then((data) => {\r\n       console.log(\"Login status data: \" , data);\r\n       if(data.status === 500){\r\n         this.props.alterLoginStatus(false);\r\n         // this.props.wrongCredentails(data.message);\r\n       }else{\r\n         this.props.alterLoginStatus(true);\r\n         this.props.loggedInUser(data);\r\n         this.props.tokenSetter(this.state.username + \":\" + this.state.password);\r\n       }\r\n\r\n     })\r\n     .catch(error => this.setState({ error }));\r\n   }\r\n\r\n   validateForm() {\r\n     return this.state.username.length > 0 && this.state.password.length > 0;\r\n   }\r\n\r\n   handleChange = event => {\r\n     this.setState({\r\n       [event.target.id]: event.target.value\r\n     });\r\n   }\r\n\r\n   handleSubmit = event => {\r\n     event.preventDefault();\r\n     this.loginVerify();\r\n   }\r\n\r\n   render() {\r\n     return (\r\n       <div className=\"form-fields\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormGroup controlId=\"username\" bsSize=\"large\">\r\n            <FormLabel>User Name</FormLabel>\r\n            <FormControl\r\n              autoFocus\r\n              type=\"text\"\r\n              value={this.state.username}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup controlId=\"password\" bsSize=\"large\">\r\n            <FormLabel>Password</FormLabel>\r\n            <FormControl\r\n              value={this.state.password}\r\n              onChange={this.handleChange}\r\n              type=\"password\"\r\n            />\r\n          </FormGroup>\r\n          <Button\r\n            block\r\n            bsSize=\"large\"\r\n            disabled={!this.validateForm()}\r\n            type=\"submit\"\r\n          >\r\n            Login\r\n          </Button>\r\n        </form>\r\n\r\n         <h2>Available Services: </h2>\r\n         {\r\n           this.props.serviceList.map(service => <div>{service.name}</div>)\r\n         }\r\n       </div>\r\n     );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  serviceList: state.userServiceReducer.serviceList,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    alterLoginStatus: (status) => dispatch(alterLoginStatus(status)),\r\n    loggedInUser: (user) => dispatch(loggedInUser(user)),\r\n    tokenSetter: (saveUser) => dispatch(tokenSetter(saveUser)),\r\n\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { alterLoginStatus, loggedInUser } from '../actions/allAction';\r\nimport urls from '../constants/AppContants';\r\nimport { Button, Table, FormLabel } from \"react-bootstrap\";\r\n\r\nclass UserPage extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        username:'',\r\n        password:''\r\n      }\r\n    }\r\n\r\n    validateForm() {\r\n     return this.state.username.length > 0 && this.state.password.length > 0;\r\n    }\r\n\r\n    handleChange = (event, field) => {\r\n     this.setState({\r\n       [field]: event.target.value\r\n     });\r\n    }\r\n\r\n    userDetailsUpdate(){\r\n      console.log(\"user details update after subscribe/unsbuscribe\", this.props.token)\r\n      fetch(urls.authenticate, {\r\n        method: 'POST',\r\n        headers: {\r\n           'Accept': 'application/json',\r\n           'Content-Type': 'application/json'\r\n         },\r\n         body: JSON.stringify({\"username\": this.props.token.split(\":\")[0], \"password\": this.props.token.split(\":\")[0]})\r\n      })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"Login status data: \" , data);\r\n        this.props.loggedInUser(data);\r\n\r\n      })\r\n      .catch(error => this.setState({ error }));\r\n    }\r\n\r\n    subscribeService(e, service){\r\n      console.log(\"User page subscribe try\",e,  service, this.props.userDetails)\r\n      fetch(urls.userSubscribeServices, {\r\n        method: 'POST',\r\n        headers: {\r\n           'Accept': 'application/json',\r\n           'Content-Type': 'application/json'\r\n         },\r\n         body: JSON.stringify({\"id\": this.props.userDetails.id, subscribes: [{\"id\": service.id}]})\r\n      })\r\n      // .then((response) => {\r\n      //   return response.json();\r\n      // })\r\n      .then((data) => {\r\n        console.log(\"Subscribed try result: \" , data);\r\n        this.userDetailsUpdate();\r\n      })\r\n      .catch(error => this.setState({ error }));\r\n\r\n    }\r\n\r\n    unsubscribeService(e, service){\r\n     console.log(\"User page unsubscribe try\",e,  service, this.props.userDetails)\r\n     fetch(urls.userSubscribeServices + \"/\" + service.id, {\r\n       method: 'DELETE',\r\n       headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\"id\": this.props.userDetails.id, subscribes: [{\"id\": service.id}]})\r\n     })\r\n     // .then((response) => {\r\n     //   return response.json();\r\n     // })\r\n     .then((data) => {\r\n       console.log(\"Unsubscribed try result: \" , data);\r\n       this.userDetailsUpdate();\r\n     })\r\n     .catch(error => this.setState({ error }));\r\n\r\n    }\r\n\r\n    logout =() => {\r\n      this.props.alterLoginStatus(false);\r\n      //remove loggein user details\r\n      this.props.loggedInUser({});\r\n    }\r\n\r\n   render() {\r\n     let subscribedServices = this.props.subscribedList.map(service => service.id);\r\n     return (\r\n       <div className=\"Login\">\r\n          <h3> Hi {this.props.username}</h3>\r\n          <Button onClick={this.logout}>Logout</Button>\r\n          <h2>Services</h2>\r\n          <Table>\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>Name</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n          {\r\n            this.props.serviceList.map(service => {\r\n              return subscribedServices.includes(service.id) ?\r\n                  <tr>\r\n                    <th><FormLabel >{service.id}</FormLabel></th>\r\n                    <th><FormLabel >{service.name}</FormLabel></th>\r\n                    <th><Button onClick={(event) => this.unsubscribeService(event, service)}>UnSubscribe</Button></th>\r\n                  </tr>\r\n                :\r\n                  <tr>\r\n                    <th><FormLabel >{service.id}</FormLabel></th>\r\n                    <th><FormLabel >{service.name}</FormLabel></th>\r\n                    <th><Button onClick={(event) => this.subscribeService(event, service)}>Subscribe</Button></th>\r\n                  </tr>\r\n\r\n                })\r\n          }\r\n         </tbody>\r\n      </Table>\r\n    </div>\r\n     );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  serviceList: state.userServiceReducer.serviceList,\r\n  userDetails: state.userServiceReducer.userDetails,\r\n  username: state.userServiceReducer.userDetails.username,\r\n  token: state.userServiceReducer.token,\r\n  subscribedList: state.userServiceReducer.userDetails.subscribes || [],\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    alterLoginStatus: (status) => dispatch(alterLoginStatus(status)),\r\n    loggedInUser: (user) => dispatch(loggedInUser(user)),\r\n\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { alterLoginStatus, loggedInUser, newUserRegister } from '../actions/allAction';\r\nimport urls from '../constants/AppContants';\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\n\r\nclass RegisterUser extends Component {\r\n  constructor(props){\r\n  super(props);\r\n    this.state={\r\n      username:'',\r\n      password:'',\r\n      confirm_password: '',\r\n      errorMsg: ''\r\n    }\r\n   }\r\n\r\n\r\n   validateForm() {\r\n     return this.state.username.length > 0 && this.state.password.length > 0 && this.state.confirm_password.length > 0;\r\n   }\r\n\r\n   handleChange = event => {\r\n     this.setState({\r\n       [event.target.id]: event.target.value\r\n     });\r\n   }\r\n\r\n   register(){\r\n     if(this.state.password != this.state.confirm_password){\r\n       this.setState({\r\n         errorMsg: \"Password not matching!!\"\r\n       })\r\n       return\r\n     }else{\r\n       this.setState({\r\n         errorMsg: \"\"\r\n       })\r\n     }\r\n     fetch(urls.users, {\r\n       method: 'POST',\r\n       headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\"username\": this.state.username, \"password\": this.state.password})\r\n     })\r\n     .then((data) => {\r\n       console.log(\"Register request status: \" , data);\r\n       if(data.status === 200){\r\n         this.props.newUserRegister(false);\r\n       }else{\r\n         this.setState({error: data.message})\r\n       }\r\n     })\r\n     .catch(error => this.setState({ error }));\r\n\r\n   }\r\n   handleSubmit = event => {\r\n     event.preventDefault();\r\n     this.register();\r\n   }\r\n\r\n   render() {\r\n     return (\r\n       <div className=\"form-fields\">\r\n         <form onSubmit={this.handleSubmit}>\r\n           <FormGroup controlId=\"username\" bsSize=\"large\">\r\n             <FormLabel>User Name</FormLabel>\r\n             <FormControl\r\n               autoFocus\r\n               type=\"text\"\r\n               value={this.state.username}\r\n               onChange={this.handleChange}\r\n             />\r\n           </FormGroup>\r\n           <FormGroup controlId=\"password\" bsSize=\"large\">\r\n             <FormLabel>Password</FormLabel>\r\n             <FormControl\r\n               value={this.state.password}\r\n               onChange={this.handleChange}\r\n               type=\"password\"\r\n             />\r\n           </FormGroup>\r\n           <FormGroup controlId=\"confirm_password\" bsSize=\"large\">\r\n             <FormLabel>Confirm Password</FormLabel>\r\n             <FormControl\r\n               value={this.state.confirm_password}\r\n               onChange={this.handleChange}\r\n               type=\"password\"\r\n             />\r\n           </FormGroup>\r\n           <Button\r\n             bsSize=\"large\"\r\n             disabled={!this.validateForm()}\r\n             type=\"submit\"\r\n           >\r\n             Register\r\n           </Button>\r\n         </form>\r\n       </div>\r\n     );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  serviceList: state.userServiceReducer.serviceList,\r\n  userDetails: state.userServiceReducer.userDetails,\r\n  username: state.userServiceReducer.userDetails.username,\r\n  subscribedList: state.userServiceReducer.userDetails.subscribes || [],\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    alterLoginStatus: (status) => dispatch(alterLoginStatus(status)),\r\n    loggedInUser: (user) => dispatch(loggedInUser(user)),\r\n    newUserRegister: (status) => dispatch(newUserRegister(status)),\r\n\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterUser);\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'fetch';\r\nimport { studentSelection, allServicesFetch, newUserRegister } from './modules/actions/allAction';\r\nimport LoginPage from './modules/components/LoginPage';\r\nimport UserPage from './modules/components/UserPage';\r\nimport RegisterUser from './modules/components/RegisterUser';\r\nimport urls from './modules/constants/AppContants';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nclass App extends Component {\r\n  componentDidMount(){\r\n    this.serviceListFetch();\r\n  }\r\n\r\n  serviceListFetch(){\r\n    fetch(urls.allServices)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      console.log(\"Available services: \" , data);\r\n      this.props.allServicesFetch(data)\r\n\r\n    })\r\n    .catch(error => this.setState({ error }));\r\n  }\r\n\r\n  studentSelection = (event) => {\r\n    this.props.studentSelection();\r\n  }\r\n  registerUser = () => {\r\n    this.props.newUserRegister(true);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"App\" >\r\n        <header className = \"App-header\" >\r\n          <h1 className = \"App-title\" > Welcome to Online Service Subscriber < /h1>\r\n        </header>\r\n\r\n        {\r\n          !this.props.register ? (this.props.loginStatus ? <UserPage /> : <LoginPage />) : \"\"\r\n        }\r\n\r\n        {\r\n          !this.props.loginStatus ?\r\n          (\r\n            this.props.register ?\r\n              <RegisterUser />\r\n            :\r\n            <Button\r\n              style={{\"bottom\": \"0\", \"position\": \"fixed\"}}\r\n              block\r\n              bsSize=\"large\"\r\n              onClick={this.registerUser}>\r\n                Register\r\n            </Button>\r\n          ) : \"\"\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  loginStatus: state.userServiceReducer.loginStatus,\r\n  username: state.userServiceReducer.userDetails.username,\r\n  subscribedList: state.userServiceReducer.userDetails.subscribes || [],\r\n  register: state.userServiceReducer.register,\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  studentSelection: () => dispatch(studentSelection()),\r\n  allServicesFetch: (data) => dispatch(allServicesFetch(data)),\r\n  newUserRegister: (status) => dispatch(newUserRegister(status)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  Provider\r\n} from 'react-redux'\r\nimport configureStore from './modules/store/store';\r\nimport './modules/styles/App.css';\r\nimport App from './App';\r\n// import registerServiceWorker from './registerServiceWorker';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <\r\n  Provider store = {\r\n    configureStore()\r\n  } >\r\n    <App / >\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n// registerServiceWorker();\r\nserviceWorker.unregister();\r\n\r\n//https://medium.com/backticks-tildes/setting-up-a-redux-project-with-create-react-app-e363ab2329b8\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\nexport default function configureStore(initialState = {}) {\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(thunk)\r\n  );\r\n}\r\n"],"sourceRoot":""}